{"version":3,"file":"static/js/472.5ba77f66.chunk.js","mappings":"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","sources":["module/post/PostAddNew.js"],"sourcesContent":["import useFirebaseImage from \"hooks/useFirebaseImage\";\nimport Toggle from \"components/toggle/Toggle\";\nimport slugify from \"slugify\";\nimport React, { useEffect, useState } from \"react\";\nimport ImageUpload from \"components/image/ImageUpload\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuth } from \"contexts/auth-context\";\nimport { toast } from \"react-toastify\";\nimport { Radio } from \"components/checkbox\";\nimport { postStatus, userRole } from \"utils/constants\";\nimport { Label } from \"components/label\";\nimport { Input } from \"components/input\";\nimport { Field, FieldCheckboxes } from \"components/field\";\nimport { Dropdown } from \"components/dropdown\";\nimport { db } from \"firebase-app/firebase-config\";\nimport { Button } from \"components/button\";\nimport {\n  addDoc,\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  serverTimestamp,\n  where,\n} from \"firebase/firestore\";\nimport DashboardHeading from \"module/dashboard/DashboardHeading\";\nimport Swal from \"sweetalert2\";\nconst PostAddNew = () => {\n  const { userInfo } = useAuth();\n  const { control, watch, setValue, handleSubmit, getValues, reset } = useForm({\n    mode: \"onChange\",\n    defaultValues: {\n      title: \"\",\n      slug: \"\",\n      status: 2,\n      hot: false,\n      image: \"\",\n      category: {},\n      user: {},\n    },\n  });\n  const watchStatus = watch(\"status\");\n  const watchHot = watch(\"hot\");\n  const {\n    image,\n    handleResetUpload,\n    progress,\n    handleSelectImage,\n    handleDeleteImage,\n  } = useFirebaseImage(setValue, getValues);\n  const [categories, setCategories] = useState([]);\n  const [selectCategory, setSelectCategory] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    async function fetchUserData() {\n      if (!userInfo.email) return;\n      const q = query(\n        collection(db, \"users\"),\n        where(\"email\", \"==\", userInfo.email)\n      );\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach((doc) => {\n        setValue(\"user\", {\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n    }\n    fetchUserData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userInfo.email]);\n  const addPostHandler = async (values) => {\n    if (\n      userInfo?.role !== userRole.ADMIN &&\n      userInfo?.role !== userRole.MOD &&\n      userInfo?.role !== userRole.USER\n    ) {\n      Swal.fire(\"Failed\", \"You have no right to do this action\", \"warning\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const cloneValues = { ...values };\n      cloneValues.slug = slugify(values.slug || values.title, { lower: true });\n      cloneValues.status = Number(values.status);\n      const colRef = collection(db, \"posts\");\n      await addDoc(colRef, {\n        ...cloneValues,\n        categoryId: cloneValues.category.id,\n        userId: cloneValues.user.id,\n        image,\n        createdAt: serverTimestamp(),\n      });\n      toast.success(\"Create new post successfully!\");\n      reset({\n        title: \"\",\n        slug: \"\",\n        status: 2,\n        category: {},\n        hot: false,\n        image: \"\",\n        user: {},\n      });\n      handleResetUpload();\n      setSelectCategory({});\n    } catch (error) {\n      setLoading(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    async function getData() {\n      const colRef = collection(db, \"categories\");\n      const q = query(colRef, where(\"status\", \"==\", 1));\n      const querySnapshot = await getDocs(q);\n      let result = [];\n      querySnapshot.forEach((doc) => {\n        result.push({\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n      setCategories(result);\n    }\n    getData();\n  }, []);\n\n  useEffect(() => {\n    document.title = \"VBLOGGING | Add new post\";\n  }, []);\n\n  const handleClickOption = async (item) => {\n    const colRef = doc(db, \"categories\", item.id);\n    const docData = await getDoc(colRef);\n    setValue(\"category\", {\n      id: docData.id,\n      ...docData.data(),\n    });\n    setSelectCategory(item);\n  };\n  if (userInfo.role !== userRole.ADMIN && userInfo.role !== userRole.MOD)\n    return null;\n\n  return (\n    <>\n      <DashboardHeading title=\"Add post\" desc=\"Add new post\"></DashboardHeading>\n      <form onSubmit={handleSubmit(addPostHandler)}>\n        <div className=\"form-layout\">\n          <Field>\n            <Label>Title</Label>\n            <Input\n              control={control}\n              placeholder=\"Enter your title\"\n              name=\"title\"\n              required\n            ></Input>\n          </Field>\n          <Field>\n            <Label>Slug</Label>\n            <Input\n              control={control}\n              placeholder=\"Enter your slug\"\n              name=\"slug\"\n            ></Input>\n          </Field>\n        </div>\n        <div className=\"form-layout\">\n          <Field>\n            <Label>Image</Label>\n            <ImageUpload\n              onChange={handleSelectImage}\n              handleDeleteImage={handleDeleteImage}\n              className=\"h-[250px]\"\n              progress={progress}\n              image={image}\n            ></ImageUpload>\n          </Field>\n          <Field>\n            <Label>Category</Label>\n            <Dropdown>\n              <Dropdown.Select placeholder=\"Select the category\"></Dropdown.Select>\n              <Dropdown.List>\n                {categories.length > 0 &&\n                  categories.map((item) => (\n                    <Dropdown.Option\n                      key={item.id}\n                      onClick={() => handleClickOption(item)}\n                    >\n                      {item.name}\n                    </Dropdown.Option>\n                  ))}\n              </Dropdown.List>\n            </Dropdown>\n            {selectCategory?.name && (\n              <span className=\"inline-block p-3 text-sm font-medium text-green-600 rounded-lg bg-green-50\">\n                {selectCategory?.name}\n              </span>\n            )}\n          </Field>\n        </div>\n        <div className=\"form-layout\">\n          <Field>\n            <Label>Feature post</Label>\n            <Toggle\n              on={watchHot === true}\n              onClick={() => setValue(\"hot\", !watchHot)}\n            ></Toggle>\n          </Field>\n          <Field>\n            <Label>Status</Label>\n            <FieldCheckboxes>\n              {userInfo?.role === userRole.ADMIN && (\n                <Radio\n                  name=\"status\"\n                  control={control}\n                  checked={Number(watchStatus) === postStatus.APPROVED}\n                  value={postStatus.APPROVED}\n                >\n                  Approved\n                </Radio>\n              )}\n              <Radio\n                name=\"status\"\n                control={control}\n                checked={Number(watchStatus) === postStatus.PENDING}\n                value={postStatus.PENDING}\n              >\n                Pending\n              </Radio>\n              <Radio\n                name=\"status\"\n                control={control}\n                checked={Number(watchStatus) === postStatus.REJECTED}\n                value={postStatus.REJECTED}\n              >\n                Reject\n              </Radio>\n            </FieldCheckboxes>\n          </Field>\n        </div>\n        <Button\n          type=\"submit\"\n          className=\"mx-auto w-[250px]\"\n          isLoading={loading}\n          disabled={loading}\n        >\n          Add new post\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default PostAddNew;\n"],"names":["userInfo","useAuth","useForm","mode","defaultValues","title","slug","status","hot","image","category","user","control","watch","setValue","handleSubmit","getValues","reset","watchStatus","watchHot","useFirebaseImage","handleResetUpload","progress","handleSelectImage","handleDeleteImage","useState","categories","setCategories","selectCategory","setSelectCategory","loading","setLoading","useEffect","email","q","query","collection","db","where","getDocs","forEach","doc","id","data","fetchUserData","addPostHandler","values","role","userRole","Swal","cloneValues","slugify","lower","Number","colRef","addDoc","categoryId","userId","createdAt","serverTimestamp","toast","querySnapshot","result","push","getData","document","handleClickOption","item","getDoc","docData","desc","onSubmit","className","I","placeholder","name","required","onChange","length","map","onClick","on","checked","postStatus","value","type","isLoading","disabled"],"sourceRoot":""}